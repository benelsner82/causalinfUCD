geom_point() + # Plotting the points
geom_smooth(method = "lm", se = FALSE) + # Adding regression lines
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
graphtheme +
labs(color = "Free Meals", y="Health Outcome", x="Family Income") # Axis labels
# Scatter plot with separate regression lines for treated and untreated units
p2 <- ggplot(data, aes(x = parent_education, y = health_outcome, color = factor(D))) +
geom_point() + # Plotting the points
geom_smooth(method = "lm", se = FALSE) + # Adding regression lines
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
graphtheme +
labs(color = "Free MEals", y="Health Outcome", x="Parental Education") # Axis labels
plotcs <- grid.arrange(p1, p2, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation.png"), plotcs, width = 12, height = 6)
# Show density plots
dens1 <- ggplot(data, aes(x = family_income, fill = factor(D), color = factor(D))) +
geom_density(alpha = 0.2) + # Adjust alpha for transparency
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = ""
) +
graphtheme
dens2 <- ggplot(data, aes(x = parent_education, fill = factor(D), color = factor(D))) +
geom_density(alpha = 0.2) + # Adjust alpha for transparency
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = ""
) +
graphtheme
plotdens <- grid.arrange(dens1, dens2, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_densities.png"), plotdens, width = 12, height = 6)
# Calculate the propensity scores
propensity_model <- glm(D ~ family_income + parent_education,
family = binomial(link = "logit"),
data = data)
# Extracting the propensity scores
data$propensity_score <- predict(propensity_model, type = "response")
prop1 <- ggplot(data, aes(x = propensity_score)) +
geom_density(fill = "blue", alpha = 0.4) + # Adjust alpha for transparency
labs(
x = "Propensity Score",
y = "Density"
) +
graphtheme
prop2 <- ggplot(data, aes(x = propensity_score, fill = factor(D), color = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = ""
) +
graphtheme
plotprop <- grid.arrange(prop1, prop2, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_propensity.png"), plotprop, width = 12, height = 6)
# Running the regression
reg1 <- lm(health_outcome ~ D, data = data)
reg2 <- lm(health_outcome ~ D + family_income, data = data)
reg3 <- lm(health_outcome ~ D + parent_education, data = data)
reg4 <- lm(health_outcome ~ D + family_income + parent_education, data = data)
reg5 <- lm(health_outcome ~ D + family_income + parent_education + I(family_income * parent_education), data = data)
stargazer(reg1, reg2, reg3, reg4, reg5, type = "text", title = "Regression Results",
column.labels = c("Model 1", "Model 2"),
dep.var.labels.include = FALSE,
covariate.labels = c("Treated", "Family Income", "Parental Education"),
omit.stat = c("f", "ser", "adj.rsq", "n"))
# PS Matching
psm.out <- matchit(D ~ family_income + parent_education,
data = data,
method = "nearest",
ratio = 1)
matched_datapsm <- match.data(psm.out)
plot.psm1 <- ggplot(matched_datapsm, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.psm2 <- ggplot(matched_datapsm, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.psm3 <- ggplot(matched_datapsm, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotpsm <- grid.arrange(plot.psm1, plot.psm2, plot.psm3, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_psm.png"), plotpsm, width = 12, height = 6)
bal.tab(psm.out, un = TRUE)
att_psm <- lm(health_outcome ~ D, data = matched_datapsm)
summary(att_psm)
# CEM
# CEM with default cut-offs
cem.out1 <- matchit(D ~ family_income + parent_education,
data = data,
method = "cem",
M = 1)
matched_data_cem1 <- match.data(cem.out1)
bal.tab(cem.out1, un = TRUE)
att_cem1 <- lm(health_outcome ~ D, data = matched_data_cem1)
summary(att_cem1)
plot.cem1 <- ggplot(matched_data_cem1, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.cem2 <- ggplot(matched_data_cem1, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.cem3 <- ggplot(matched_data_cem1, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotcem <- grid.arrange(plot.cem1, plot.cem2, plot.cem3, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_cem.png"), plotcem, width = 12, height = 6)
#CEM with custom cut-offs
# Step 1: pre-process the data
data$family_income_cat <- cut(data$family_income,
breaks = quantile(data$family_income,
probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE)
data$parent_education_cat <- cut(data$parent_education,
breaks = quantile(data$parent_education,
probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE)
cem.out2 <- matchit(D ~ family_income_cat + parent_education_cat,
data = data,
method = "cem",
M = 1)
matched_data_cem2 <- match.data(cem.out2)
bal.tab(cem.out2, un = TRUE)
att_cem2 <- lm(health_outcome ~ D, data = matched_data_cem2)
summary(att_cem2)
# Mahalanobis Matching
# Nearest neighbor
mahal.out1 <- matchit(D ~ family_income + parent_education,
data = data,
method = "nearest",
distance = "mahalanobis",
M = 1)
matched_data_mahal1 <- match.data(mahal.out1)
bal.tab(mahal.out1, un = TRUE)
att_mahal1 <- lm(health_outcome ~ D, data = matched_data_mahal1)
summary(att_mahal1)
plot.mahal1 <- ggplot(matched_data_mahal1, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal2 <- ggplot(matched_data_mahal1, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.mahal3 <- ggplot(matched_data_mahal1, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal <- grid.arrange(plot.mahal1, plot.mahal2, plot.mahal3, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_mahal.png"), plotmahal, width = 12, height = 6)
# 5 nearest neighbors
mahal.out2 <- matchit(D ~ family_income + parent_education,
data = data,
method = "nearest",
distance = "mahalanobis",
replace = TRUE,
ratio = 5)
matched_data_mahal2 <- match.data(mahal.out2)
bal.tab(mahal.out2, un = TRUE)
att_mahal2 <- lm(health_outcome ~ D, data = matched_data_mahal2)
summary(att_mahal2)
plot.mahal4 <- ggplot(matched_data_mahal2, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal5 <- ggplot(matched_data_mahal2, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.mahal6 <- ggplot(matched_data_mahal2, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal2 <- grid.arrange(plot.mahal4, plot.mahal5, plot.mahal6, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_mahal2.png"), plotmahal2, width = 12, height = 6)
#-------------------------------------------------
# Section 3: Simulation: Bias-Variance Trade-off
run_simulation <- function(k) {
n <- 100
D <- rbinom(n, 1, 0.2)
family_income <- rnorm(n, mean = 50000, sd = 10000) - 20000 * D
parent_education <- rnorm(n, mean = 12, sd = 3) - 4 * D
health_outcome <- 50 + 5 * D + 0.01 * family_income + 0.5 * parent_education - 0.0005 * family_income * parent_education + rnorm(n, mean = 0, sd = 5)
data <- data.frame(health_outcome, D, family_income, parent_education)
# Mahalanobis distance matching
match.out <- matchit(D ~ family_income + parent_education, data = data, method = "nearest", distance = "mahalanobis", k = k)
matched_data <- match.data(match.out)
# Estimate treatment effect
lm_model <- lm(health_outcome ~ D, data = matched_data)
return(coef(lm_model)["D"]) # Return the treatment effect estimate
}
# Running simulations for k = 1
results_k1 <- replicate(200, run_simulation(k = 1))
# Running simulations for k = 5
results_k5 <- replicate(200, run_simulation(k = 3))
simulationdata <- data.frame(results_k1, results_k5)
simulationdata_long <- melt(simulationdata,
variable.name = "k_value",
value.name = "Estimated_Effect")
simplot <- ggplot(simulationdata_long, aes(x = Estimated_Effect, fill = k_value)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 5, color = "black", linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"),
labels = c("k = 1", "k = 3"),
name = "Neighbours") +
labs(x = "Estimated Treatment Effect", y = "Density") +
graphtheme +
ggtitle("Density of Estimated Treatment Effects")
ggsave(filename = paste0(path, "assignment1_simulation_bias_variance.png"), simplot, width = 12, height = 6)
reg1 <- lm(health_outcome ~ D, data = data)
reg2 <- lm(health_outcome ~ D + family_income, data = data)
reg3 <- lm(health_outcome ~ D + parent_education, data = data)
reg4 <- lm(health_outcome ~ D + family_income + parent_education, data = data)
reg5 <- lm(health_outcome ~ D + family_income + parent_education + I(family_income * parent_education), data = data)
stargazer(reg1, reg2, reg3, reg4, reg5, type = "text", title = "Regression Results",
column.labels = c("Model 1", "Model 2"),
dep.var.labels.include = FALSE,
covariate.labels = c("Treated", "Family Income", "Parental Education"),
omit.stat = c("f", "ser", "adj.rsq", "n"))
lm(family_income ~ parent_education, data=data)
lm(family_income ~ treated, data=data)
lm(family_income ~ treat, data=data)
lm(family_income ~ D, data=data)
rnorm()
rnorm(1)
rnorm(1)
# Let's create a dataset with 100 observations and 3 variables
n <- 100 # number of observations
D <- rbinom(n, 1, 0.5) # 50% are treated here
X1 <- rnorm(n, mean=100, sd=15) # a normally distributed covariate
X2 <- rnorm(n, mean=50, sd=10) # another normally distributed covariate
data <- data.frame(D, X1, X2) # create a data frame
head(data)
# Now suppose you want to create an outcome through a data-generating process
# generate an error term
data$error <- rnorm(n, mean=0, sd=5)
# generate the outcome
data$Y <- 5 + 3 * data$D + 0.1 * data$X1 + 0.5 * data$X2 + data$error
head(data)
View(data)
reg <- lm(Y ~ D + X1 + X2, data = data)
summary(reg)
# STEP 1: set parameters
set.seed(123) # Set seed for reproducibility
reps <- 500   # Set the number of replications
n <- 100      # Set the sample size in each replication
# STEP 2:
# Write a function that generates the data and estimates the model
# This function will be called in each replication
simulate <- function(n) {
# Generate the data
error <- rnorm(n)
X1 <- 0.8*rnorm(n) + 0.2*error # assume X2 is correlated with the error term
D <- rbinom(n, 1, 0.5) # 50% are treated here
Y <- 5 + 3 * D + 0.5 * X1 + error # Specify the DGP
data <- data.frame(X1, X2, D, Y)
# Estimate the model
reg <- lm(Y ~ D + X1 + X2, data = data)
# Return the coefficient of the treatment variable
return(coef(reg)[2])
}
# STEP 3: Run the Monte Carlo simulation
estimates <- replicate(reps, simulate(n))
# STEP 4: Analyse the results
mean(estimates) # The average of the estimates
sd(estimates)   # The standard deviation of the estimates
# Plot the sampling distribution of the OLS estimator
ggplot(data.frame(estimates), aes(x = estimates)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Sampling Distribution of the OLS Estimator", x = "Estimate", y = "Frequency") +
theme_minimal()
# STEP 1: set parameters
set.seed(123) # Set seed for reproducibility
reps <- 500   # Set the number of replications
n <- 100      # Set the sample size in each replication
# STEP 2:
# Write a function that generates the data and estimates the model
# This function will be called in each replication
simulate <- function(n) {
# Generate the data
error <- rnorm(n)
X1 <- 0.8*rnorm(n) + 0.2*error # assume X2 is correlated with the error term
D <- rbinom(n, 1, 0.5) # 50% are treated here
Y <- 5 + 3 * D + 0.5 * X1 + error # Specify the DGP
data <- data.frame(X1, D, Y)
# Estimate the model
reg <- lm(Y ~ D + X1, data = data)
# Return the coefficient of the treatment variable
return(coef(reg)[2])
}
# STEP 3: Run the Monte Carlo simulation
estimates <- replicate(reps, simulate(n))
# STEP 4: Analyse the results
mean(estimates) # The average of the estimates
sd(estimates)   # The standard deviation of the estimates
# Plot the sampling distribution of the OLS estimator
ggplot(data.frame(estimates), aes(x = estimates)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Sampling Distribution of the OLS Estimator", x = "Estimate", y = "Frequency") +
theme_minimal()
# STEP 1: set parameters
set.seed(123) # Set seed for reproducibility
reps <- 500   # Set the number of replications
n <- 100      # Set the sample size in each replication
# STEP 2:
# Write a function that generates the data and estimates the model
# This function will be called in each replication
simulate <- function(n) {
# Generate the data
error <- rnorm(n)
X1 <- 0.8*rnorm(n) + 0.2*error # assume X2 is correlated with the error term
D <- rbinom(n, 1, 0.5) # 50% are treated here
Y <- 5 + 3 * D + 0.5 * X1 + error # Specify the DGP
data <- data.frame(X1, D, Y)
# Estimate the model (we do not include X1 here)
reg <- lm(Y ~ D, data = data)
# Return the coefficient of the treatment variable
return(coef(reg)[2])
}
# STEP 3: Run the Monte Carlo simulation
estimates <- replicate(reps, simulate(n))
# STEP 4: Analyse the results
mean(estimates) # The average of the estimates
sd(estimates)   # The standard deviation of the estimates
# Plot the sampling distribution of the OLS estimator
ggplot(data.frame(estimates), aes(x = estimates)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Sampling Distribution of the OLS Estimator", x = "Estimate", y = "Frequency") +
theme_minimal()
# STEP 1: set parameters
set.seed(123) # Set seed for reproducibility
reps <- 500   # Set the number of replications
n <- 100      # Set the sample size in each replication
# STEP 2:
# Write a function that generates the data and estimates the model
# This function will be called in each replication
simulate <- function(n) {
# Generate the data
error <- rnorm(n)
D <- rbinom(n, 1, 0.5) # 50% are treated here
X1 <- 0.8*rnorm(n) + 0.2*D # assume X1 is correlated with the treatment
Y <- 5 + 3 * D + 0.5 * X1 + error # Specify the DGP
data <- data.frame(X1, D, Y)
# Estimate the model (we do not include X1 here)
reg <- lm(Y ~ D, data = data)
# Return the coefficient of the treatment variable
return(coef(reg)[2])
}
# STEP 3: Run the Monte Carlo simulation
estimates <- replicate(reps, simulate(n))
# STEP 4: Analyse the results
mean(estimates) # The average of the estimates
sd(estimates)   # The standard deviation of the estimates
# Plot the sampling distribution of the OLS estimator
ggplot(data.frame(estimates), aes(x = estimates)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Sampling Distribution of the OLS Estimator", x = "Estimate", y = "Frequency") +
theme_minimal()
# STEP 1: set parameters
set.seed(123) # Set seed for reproducibility
reps <- 500   # Set the number of replications
n <- 100      # Set the sample size in each replication
# STEP 2:
# Write a function that generates the data and estimates the model
# This function will be called in each replication
simulate <- function(n) {
# Generate the data
error <- rnorm(n)
D <- rbinom(n, 1, 0.5) # 50% are treated here
X1 <- 0.4*rnorm(n) + 0.6*D # assume X1 is correlated with the treatment
Y <- 5 + 3 * D + 0.5 * X1 + error # Specify the DGP
data <- data.frame(X1, D, Y)
# Estimate the model (we do not include X1 here)
reg <- lm(Y ~ D, data = data)
# Return the coefficient of the treatment variable
return(coef(reg)[2])
}
# STEP 3: Run the Monte Carlo simulation
estimates <- replicate(reps, simulate(n))
# STEP 4: Analyse the results
mean(estimates) # The average of the estimates
sd(estimates)   # The standard deviation of the estimates
# Plot the sampling distribution of the OLS estimator
ggplot(data.frame(estimates), aes(x = estimates)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Sampling Distribution of the OLS Estimator", x = "Estimate", y = "Frequency") +
theme_minimal()
setwd("~/github_repos/causalinfUCD/slides/assignments")
