bal.tab(cem.out1, un = TRUE)
att_cem1 <- lm(health_outcome ~ D, data = matched_data_cem1)
summary(att_cem1)
plot.cem1 <- ggplot(matched_data_cem1, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
scale_color_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.cem2 <- ggplot(matched_data_cem1, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
scale_color_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.cem3 <- ggplot(matched_data_cem1, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
scale_color_manual(values = c("blue", "red"), labels = c("Control", "Treated")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotcem <- grid.arrange(plot.cem1, plot.cem2, plot.cem3, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_cem.png"), plotcem, width = 12, height = 6)
# Nearest neighbor
mahal.out1 <- matchit(D ~ family_income + parent_education,
data = data,
method = "nearest",
distance = "mahalanobis",
M = 1)
matched_data_mahal1 <- match.data(mahal.out1)
bal.tab(mahal.out1, un = TRUE)
att_mahal1 <- lm(health_outcome ~ D, data = matched_data_mahal1)
summary(att_mahal1)
plot.mahal1 <- ggplot(matched_data_mahal1, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal2 <- ggplot(matched_data_mahal1, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.mahal3 <- ggplot(matched_data_mahal1, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal <- grid.arrange(plot.mahal1, plot.mahal2, plot.mahal3, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_mahal.png"), plotmahal, width = 12, height = 6)
plot.mahal6 <- ggplot(matched_data_mahal2, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal2 <- grid.arrange(plot.mahal4, plot.mahal5, plot.mahal6, ncol = 2)
# 5 nearest neighbors
mahal.out2 <- matchit(D ~ family_income + parent_education,
data = data,
method = "nearest",
distance = "mahalanobis",
replace = TRUE,
ratio = 5)
matched_data_mahal2 <- match.data(mahal.out2)
bal.tab(mahal.out2, un = TRUE)
att_mahal2 <- lm(health_outcome ~ D, data = matched_data_mahal2)
summary(att_mahal2)
plot.mahal4 <- ggplot(matched_data_mahal2, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal5 <- ggplot(matched_data_mahal2, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal6 <- ggplot(matched_data_mahal2, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal2 <- grid.arrange(plot.mahal4, plot.mahal5, plot.mahal6, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_mahal2.png"), plotmahal2, width = 12, height = 6)
plot.mahal5 <- ggplot(matched_data_mahal2, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.mahal5
plot.mahal4 <- ggplot(matched_data_mahal2, aes(x = family_income, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(family_income[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(family_income[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Family Income",
y = "Density"
) +
graphtheme
plot.mahal5 <- ggplot(matched_data_mahal2, aes(x = parent_education, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(parent_education[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(parent_education[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Parental Education",
y = "Density"
) +
graphtheme
plot.mahal6 <- ggplot(matched_data_mahal2, aes(x = propensity_score, fill = factor(D))) +
geom_density(alpha = 0.4) + # Adjust alpha for transparency
geom_vline(aes(xintercept = mean(propensity_score[D == 1]), color = "Treated"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = mean(propensity_score[D == 0]), color = "Control"), linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
scale_color_manual(values = c("blue", "red"), labels = c("No", "Yes")) +
labs(
fill = "Free Meals",
color = "Free Meals",
x = "Propensity Score",
y = "Density"
) +
graphtheme
plotmahal2 <- grid.arrange(plot.mahal4, plot.mahal5, plot.mahal6, ncol = 2)
ggsave(filename = paste0(path, "assignment1_simulation_mahal2.png"), plotmahal2, width = 12, height = 6)
#-------------------------------------------------
# Section 3: Simulation: Bias-Variance Trade-off
run_simulation <- function(k) {
n <- 100
D <- rbinom(n, 1, 0.2)
family_income <- rnorm(n, mean = 50000, sd = 10000) - 20000 * D
parent_education <- rnorm(n, mean = 12, sd = 3) - 4 * D
health_outcome <- 50 + 5 * D + 0.01 * family_income + 0.5 * parent_education - 0.0005 * family_income * parent_education + rnorm(n, mean = 0, sd = 5)
data <- data.frame(health_outcome, D, family_income, parent_education)
# Mahalanobis distance matching
match.out <- matchit(D ~ family_income + parent_education, data = data, method = "nearest", distance = "mahalanobis", k = k)
matched_data <- match.data(match.out)
# Estimate treatment effect
lm_model <- lm(health_outcome ~ D, data = matched_data)
return(coef(lm_model)["D"]) # Return the treatment effect estimate
}
# Running simulations for k = 1
results_k1 <- replicate(200, run_simulation(k = 1))
# Running simulations for k = 5
results_k5 <- replicate(200, run_simulation(k = 5))
head(simulationdata)
simulationdata <- data.frame(results_k1, results_k5)
head(simulationdata)
install.packages(reshape2)
install.packages("reshape2")
library(reshape2)
simulationdata <- data.frame(results_k1, results_k5)
simulationdata_long <- melt(simulationdata,
variable.name = "k_value",
value.name = "Estimated_Effect")
ggplot(simulationdata_long, aes(x = Estimated_Effect, fill = k_value)) +
geom_density(alpha = 0.4) +
geom_vline(xintercept = 5, color = "red", linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "green"),
labels = c("k = 1", "k = 5"),
name = "Number of Neighbors") +
labs(x = "Estimated Treatment Effect", y = "Density") +
theme_minimal() +
theme(text = element_text(size = 20)) +
ggtitle("Density of Estimated Treatment Effects")
simplot <- ggplot(simulationdata_long, aes(x = Estimated_Effect, fill = k_value)) +
geom_density(alpha = 0.4) +
geom_vline(xintercept = 5, color = "black", linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"),
labels = c("k = 1", "k = 5"),
name = "Neighbours") +
labs(x = "Estimated Treatment Effect", y = "Density") +
graphtheme +
ggtitle("Density of Estimated Treatment Effects")
ggsave(filename = paste0(path, "assignment1_simulation_bias_variance.png"), simplot, width = 12, height = 6)
#-------------------------------------------------
# Section 3: Simulation: Bias-Variance Trade-off
run_simulation <- function(k) {
n <- 100
D <- rbinom(n, 1, 0.2)
family_income <- rnorm(n, mean = 50000, sd = 10000) - 20000 * D
parent_education <- rnorm(n, mean = 12, sd = 3) - 4 * D
health_outcome <- 50 + 5 * D + 0.01 * family_income + 0.5 * parent_education - 0.0005 * family_income * parent_education + rnorm(n, mean = 0, sd = 5)
data <- data.frame(health_outcome, D, family_income, parent_education)
# Mahalanobis distance matching
match.out <- matchit(D ~ family_income + parent_education, data = data, method = "nearest", distance = "mahalanobis", k = k)
matched_data <- match.data(match.out)
# Estimate treatment effect
lm_model <- lm(health_outcome ~ D, data = matched_data)
return(coef(lm_model)["D"]) # Return the treatment effect estimate
}
# Running simulations for k = 1
results_k1 <- replicate(200, run_simulation(k = 1))
# Running simulations for k = 5
results_k5 <- replicate(200, run_simulation(k = 10))
simulationdata <- data.frame(results_k1, results_k5)
simulationdata_long <- melt(simulationdata,
variable.name = "k_value",
value.name = "Estimated_Effect")
simplot <- ggplot(simulationdata_long, aes(x = Estimated_Effect, fill = k_value)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 5, color = "black", linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"),
labels = c("k = 1", "k = 10"),
name = "Neighbours") +
labs(x = "Estimated Treatment Effect", y = "Density") +
graphtheme +
ggtitle("Density of Estimated Treatment Effects")
ggsave(filename = paste0(path, "assignment1_simulation_bias_variance.png"), simplot, width = 12, height = 6)
run_simulation <- function(k) {
n <- 100
D <- rbinom(n, 1, 0.2)
family_income <- rnorm(n, mean = 50000, sd = 10000) - 20000 * D
parent_education <- rnorm(n, mean = 12, sd = 3) - 4 * D
health_outcome <- 50 + 5 * D + 0.01 * family_income + 0.5 * parent_education - 0.0005 * family_income * parent_education + rnorm(n, mean = 0, sd = 5)
data <- data.frame(health_outcome, D, family_income, parent_education)
# Mahalanobis distance matching
match.out <- matchit(D ~ family_income + parent_education, data = data, method = "nearest", distance = "mahalanobis", k = k)
matched_data <- match.data(match.out)
# Estimate treatment effect
lm_model <- lm(health_outcome ~ D, data = matched_data)
return(coef(lm_model)["D"]) # Return the treatment effect estimate
}
# Running simulations for k = 1
results_k1 <- replicate(200, run_simulation(k = 1))
# Running simulations for k = 5
results_k5 <- replicate(200, run_simulation(k = 3))
simulationdata <- data.frame(results_k1, results_k5)
simulationdata_long <- melt(simulationdata,
variable.name = "k_value",
value.name = "Estimated_Effect")
simplot <- ggplot(simulationdata_long, aes(x = Estimated_Effect, fill = k_value)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 5, color = "black", linetype = "dashed", size = 1) +
scale_fill_manual(values = c("blue", "red"),
labels = c("k = 1", "k = 3"),
name = "Neighbours") +
labs(x = "Estimated Treatment Effect", y = "Density") +
graphtheme +
ggtitle("Density of Estimated Treatment Effects")
ggsave(filename = paste0(path, "assignment1_simulation_bias_variance.png"), simplot, width = 12, height = 6)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
set.seed(123)
# Vector of random numbers
a <- sample(1:15, 10, replace=TRUE)
# Vector of statistics
stats <- c(sum(a), mean(a), sd(a), min(a), max(a), median(a), length(a))
stats
# Vector of random numbers
a <- sample(1:15, 10, replace=TRUE)
# Vector of statistics
stats <- c(Sum=sum(a),
Mean=mean(a), sd(a), min(a), max(a), median(a), length(a))
stats
# Vector of random numbers
a <- sample(1:15, 10, replace=TRUE)
# Vector of statistics
stats <- c(Sum=sum(a),
Mean=mean(a),
SD=sd(a),
Minimum=min(a),
Maximum=max(a),
Median=median(a),
N=length(a))
stats
# Vector of random numbers
a <- sample(1:15, 10, replace=TRUE)
# Vector of statistics
stats <- c(Sum=sum(a),
Mean=mean(a),
SD=sd(a),
Minimum=min(a),
Maximum=max(a),
Median=median(a),
N=length(a))
stats
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(12345)
library(tidyverse)
library(knitr)
library(kableExtra)
# 1 using paste to create a file name
directory <- "C:/user/Rcourse/"
file <- "newfigure.png"
subfolder <- "graphs"
path <- paste(directory, subfolder, "/", file, sep="")
path
# 2 concatenating a string
neverwalk <- c("Walk", "on", "with", "hope", "in", "your", "heart")
alone <- paste(neverwalk, collapse= " ")
# 1 using paste to create a file name
directory <- "C:/user/Rcourse/"
file <- "newfigure.png"
subfolder <- "graphs"
path <- paste(directory, subfolder, "/", file, sep="")
path
# 2 concatenating a string
neverwalk <- c("Walk", "on", "with", "hope", "in", "your", "heart")
alone <- paste(neverwalk, collapse= " ")
alone
a <- sample(1:8, 8, replace=TRUE)
b <- sample(1:8, 8, replace=TRUE)
# 2 compare identical elements
c <- a==b
a
b
c
intab <- intersect(a,b)
intab
d <- d[d>=2 & d <= 7]
d <- c(a,b)
d
d[d>=2 & d <= 7]
d[c(4,5)] <- 1
d
# Specify each variable as a vector
animal <- rep(c("sheep", "pig"), c(3,3))
year <- rep(2019:2021, 2)
weight <- c(110, 120, 140, NA, 300, 800)
height <- c(2.2, 2.4, 2.7, 2, 2.1, 2.3)
condition <- c("excellent", "good", NA, "excellent", "good", "average")
condition <- factor(condition, ordered = TRUE,
levels = c("average", "good", "excellent"))
healthy <- c(rep(TRUE, 5), FALSE)
# Combine all vectors in a data frame
my_data_frame <- data.frame(animal, year,
weight, height, condition, healthy)
my_data_frame
View(my_data_frame)
coffee_survey$age_group1 <- factor(coffee_survey$age_group,
levels=c("20-30", "30-40", "40-50", "50-60"),
ordered=TRUE)
coffee_survey <- data.frame(
name = c("Alice", "Bob", "Charlie", "David",
"Eve", "Frank", "Grace", "Hannah", "Ivan", "Jane"),
# Age Group - Unordered Factor
age_group = c("20-30", "30-40", "20-30", "40-50", "50-60",
"20-30", "30-40", "40-50", "20-30", "50-60"),
# Preference - Ordered Factor (from Dislike to Like a lot)
preference = c("Neutral", "Like", "Dislike", "Like a lot",
"Neutral", "Dislike", "Like", "Like", "Like a lot", "Neutral")
)
# Convert age_group to an unordered factor
coffee_survey$age_group <- factor(coffee_survey$age_group)
# Convert preference to an ordered factor
coffee_survey$preference <- factor(coffee_survey$preference,
levels = c("Dislike", "Neutral", "Like", "Like a lot"),
ordered = TRUE)
coffee_survey$age_group1 <- factor(coffee_survey$age_group,
levels=c("20-30", "30-40", "40-50", "50-60"),
ordered=TRUE)
coffee_survey$age_group1[1]> coffee_survey$age_group1[2]
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(12345)
library(tidyverse)
library(knitr)
library(kableExtra)
path <- "/Users/ben_elsner/github repos/metrixconsult/"
df <- tibble(
colour = sample(c('white', 'blue'), 8, replace=TRUE),
value = sample(1:10, 8, replace=TRUE)
)
df_blue <- filter(df, colour == "blue")
View(df)
View(df_blue)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(12345)
library(tidyverse)
library(knitr)
library(kableExtra)
path <- "/Users/ben_elsner/github repos/metrixconsult/"
library(tidyverse)
library(readr)
# Note: this path will look differently in your case
titanic <- read_csv(paste(path,"IGEES R Course/R Course Slides/data/titanic.csv", sep=""))
df <- tibble(
colour = sample(c('white', 'blue'), 8, replace=TRUE),
value = sample(1:10, 8, replace=TRUE)
)
# Use filter to get a subset of only blue observations
df_blue <- filter(df, colour == "blue")
df_titanic_subset <- filter(titanic, Survived==1)
df_titanic_subset <- filter(df_titanic_subset, Pclass %in% c(2,3))
df_titanic_subset <- filter(df_titanic_subset, between(Fare, 10, 40))
View(df_titanic_subset)
titanic_transformed <- titanic %>%
mutate(
Status = case_when(
Survived == 1 & Pclass == 1 ~ "1st Class Survivor",
Survived == 1 & Pclass == 2 ~ "2nd Class Survivor",
Survived == 1 & Pclass == 3 ~ "3rd Class Survivor",
Survived == 0 & Pclass == 1 ~ "1st Class Casualty",
Survived == 0 & Pclass == 2 ~ "2nd Class Casualty",
Survived == 0 & Pclass == 3 ~ "3rd Class Casualty"
)
) %>%
dplyr::select(Survived, Pclass, Status)
View(titanic_transformed)
titanic %>%
mutate(SurvivalStatus = recode(Survived, `0` = "Perished",
`1` = "Survived")) %>%
dplyr::select(PassengerId, Survived, SurvivalStatus)
titanic %>%
mutate(
age_code = case_when(
Age < 18 ~ 1L,
Age >= 18 & Age <= 50 ~ 2L,
Age > 50 | is.na(Age) ~ 3L
),
age_category = recode(age_code, `1` = "child",
`2` = "working age",
`3` = "senior")
) %>%
dplyr::select(PassengerId, Age, age_category)
setwd("~/github repos/causalinfUCD")
setwd("~/github repos/causalinfUCD/slides/assignments")
