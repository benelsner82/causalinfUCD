geom_sf_label(aes(label = postcode), nudge_y = 0.01)
# 6. House price data
houseprice <- readRDS(paste(path, "/R Course Slides/data/houseprice.RDS", sep=""))
houseprice <- houseprice[1:22,]
houseprice <- houseprice %>%
mutate(change1 = (`2012 q4` - `2006 q1`)/1000,
change2 = (`2018 q4` - `2013 q1`)/1000) %>%
dplyr::select(Area, change1, change2)
# 7. Join datasets
dublin_sf <- dublin_sf %>%
inner_join(houseprice, by = c("Yelp_postc" = "Area"))
# 8. maps
pricemap1 <- ggplot(data = dublin_sf) +
geom_sf(aes(fill = change1)) +
scale_fill_gradient(high = "blue", low = "red", name = "Change") +
labs(title = "Change in House Prices 2006-2012") +
theme_void() +
theme(legend.position = "bottom")
pricemap2 <- ggplot(data = dublin_sf) +
geom_sf(aes(fill = change2)) +
scale_fill_gradient(high = "blue", low = "red", name = "Change") +
labs(title = "Change in House Prices 2013-2018") +
theme_void() +
theme(legend.position = "bottom")
data <- data.frame(
Category = rep(c("Category 1", "Category 2", "Category 3"), each = 2),
Group = rep(c("Group A", "Group B"), times = 3),
Value = c(10, 15, 5, 7, 8, 12)
)
library(ggplot2)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
coord_flip() +  # To make the bar chart horizontal
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.y = element_blank(),  # Removing the y-axis ticks
panel.grid.major.y = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.y = element_blank(),  # Removing y-axis minor grid lines
axis.text.y = element_text(color = "black")  # Ensuring y-axis text is black for visibility
)
library(ggplot2)
library(wesanderson)
# Sample data
data <- data.frame(
Category = rep(c("Category 1", "Category 2", "Category 3"), each = 2),
Group = rep(c("Group A", "Group B"), times = 3),
Value = c(10, 15, 5, 7, 8, 12)
)
# Wes Anderson color palette
palette <- wes_palette("GrandBudapest1", n = 2, type = "discrete")  # Change "GrandBudapest1" as desired
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = palette) +  # Using wesanderson color palette
labs(x = NULL, y = "Value", fill = "Group") +
theme(
legend.position = "top",
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text(color = "black")
)
# Now we want to produce the same bar chart with vertical bars and the Darjeeling Limited palette
palette <- wes_palette("Darjeeling1", n = 2, type = "discrete")  # Change "Darjeeling1" as desired
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = palette) +
labs(x = NULL, y = "Value", fill = "Group") +
theme(
legend.position = "top",
axis.ticks.x = element_blank(),  # Removing the x-axis ticks
panel.grid.major.x = element_blank(),  # Removing x-axis major grid lines
panel.grid.minor.x = element_blank(),  # Removing x-axis minor grid lines
axis.text.x = element_text(color = "black")  # Ensuring x-axis text is black for visibility
# Now we want to produce the same bar chart with vertical bars and the Darjeeling Limited palette
palette <- wes_palette("Darjeeling1", n = 2, type = "discrete")  # Change "Darjeeling1" as desired
palette <- wes_palette("Darjeeling1", n = 2, type = "discrete")  # Change "Darjeeling1" as desired
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = palette) +
labs(x = NULL, y = "Value", fill = "Group") +
theme(
legend.position = "top",
axis.ticks.x = element_blank(),  # Removing the x-axis ticks
panel.grid.major.x = element_blank(),  # Removing x-axis major grid lines
panel.grid.minor.x = element_blank(),  # Removing x-axis minor grid lines
axis.text.x = element_text(color = "black")  # Ensuring x-axis text is black for visibility
palette <- wes_palette("Darjeeling1", n = 2, type = "discrete")  # Change "Darjeeling1" as desired
palette <- wes_palette("Darjeeling1", n = 2, type = "discrete")  # Change "Darjeeling1" as desired
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = palette) +
labs(x = NULL, y = "Value", fill = "Group") +
theme(
legend.position = "top",
axis.ticks.x = element_blank(),  # Removing the x-axis ticks
panel.grid.major.x = element_blank(),  # Removing x-axis major grid lines
panel.grid.minor.x = element_blank(),  # Removing x-axis minor grid lines
axis.text.x = element_text(color = "black"))  # Ensuring x-axis text is black for visibility
install.packages("chattr")
remotes::install_github("mlverse/chattr")
library(chattr)
chattr:chattr_app()
chattr:chattr_app()
data <- data.frame(
Category = rep(c("Category 1", "Category 2", "Category 3"), each = 2),
Group = rep(c("Group A", "Group B"), times = 3),
Value = c(10, 15, 5, 7, 8, 12)
)
library(ggplot2)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
coord_flip() +  # To make the bar chart horizontal
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.y = element_blank(),  # Removing the y-axis ticks
panel.grid.major.y = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.y = element_blank(),  # Removing y-axis minor grid lines
axis.text.y = element_text(color = "black")  # Ensuring y-axis text is black for visibility
)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.x = element_blank(),  # Removing the y-axis ticks
panel.grid.major.x = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.x = element_blank(),  # Removing y-axis minor grid lines
axis.text.x = element_text(color = "black")  # Ensuring y-axis text is black for visibility
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
data <- data.frame(
Category = rep(c("Category 1", "Category 2", "Category 3"), each = 2),
Group = rep(c("Group A", "Group B"), times = 3),
Value = c(10, 15, 5, 7, 8, 12)
)
View(data)
library(ggplot2)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
coord_flip() +  # To make the bar chart horizontal
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.y = element_blank(),  # Removing the y-axis ticks
panel.grid.major.y = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.y = element_blank(),  # Removing y-axis minor grid lines
axis.text.y = element_text(color = "black")  # Ensuring y-axis text is black for visibility
)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.y = element_blank(),  # Removing the y-axis ticks
panel.grid.major.y = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.y = element_blank(),  # Removing y-axis minor grid lines
axis.text.y = element_text(color = "black")  # Ensuring y-axis text is black for visibility)
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
theme_minimal() +  # Minimal theme
labs(x = NULL, y = "Value", fill = "Group") +  # Removing the x-axis label, labeling y-axis and legend
theme(
legend.position = "top",
axis.ticks.y = element_blank(),  # Removing the y-axis ticks
panel.grid.major.y = element_blank(),  # Removing y-axis major grid lines
panel.grid.minor.y = element_blank(),  # Removing y-axis minor grid lines
axis.text.y = element_text(color = "black")  # Ensuring y-axis text is black for visibility
)
library(ggplot2)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
library(ggplot2)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df$election_order <- factor(df$election_name, levels = df$election_name)
library(ggplot2)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df$election_order <- factor(df$electionname, levels = df$electionname)
# Plot
ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
theme_minimal() +
coord_flip() +  # Flip coordinates to make it horizontal
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme(
axis.text.y = element_text(size = 4), # Adjust size as needed for your data
axis.title.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm") # Adjust margins as needed
)
library(ggplot2)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df$election_order <- factor(df$electionname, levels = df$electionname)
df <- df %>% mutate(diff=Incumbent_share_weight-share_woPM_IV1)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df$election_order <- factor(df$electionname, levels = df$electionname)
df <- df %>% mutate(diff=Incumbent_share_weight-share_woPM_IV1)
# Plot
ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
theme_minimal() +
coord_flip() +  # Flip coordinates to make it horizontal
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme(
axis.text.y = element_text(size = 4), # Adjust size as needed for your data
axis.title.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm") # Adjust margins as needed
)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
mutate(diff = Incumbent_share_weight - share_woPM_IV1,
election_order = factor(electionname, levels = rev(unique(electionname))))
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
coord_flip() + # Flip coordinates to make it horizontal
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8), # Increased size for y axis labels
axis.text.x = element_text(size = 8), # Increased size for x axis labels
axis.title.y = element_blank(),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm") # Adjust margins as needed
)
# Print the plot
print(p)
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8), # Increased size for y axis labels
axis.text.x = element_text(size = 8), # Increased size for x axis labels
axis.title.y = element_blank(),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm") # Adjust margins as needed
)
# Print the plot
print(p)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
mutate(diff = Incumbent_share_weight - share_woPM_IV1)
df$election_order <- factor(df$electionname, levels = df$electionname[order(df$diff)])
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8), # Adjust y axis text size
axis.text.x = element_text(size = 8), # Adjust x axis text size
axis.title.y = element_blank(),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm") # Adjust margins
)
# Print the plot
print(p)
View(df)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
filter(
!grepl("Hamburg", electionname),
!grepl("Berlin", electionname),
!grepl("Bremen", electionname)
) %>%
mutate(
diff = Incumbent_share_weight - share_woPM_IV1,
election_order = factor(electionname, levels = electionname[order(diff)])
)
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8), # Adjust y axis text size
axis.text.x = element_text(size = 8), # Adjust x axis text size
axis.title.y = element_blank(),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm") # Adjust margins
)
# Print the plot
print(p)
# Export the plot to a PNG file
outputfile <- paste0(path, "outputs/dumbbell_plot.png")
ggsave(outputfile, plot=p, width = 8.27, height = 11.69, units = "in", dpi = 300)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
filter(
!grepl("Hamburg", electionname),
!grepl("Berlin", electionname),
!grepl("Bremen", electionname)
) %>%
mutate(
diff = Incumbent_share_weight - share_woPM_IV1,
election_order = factor(electionname, levels = electionname[order(diff)])
)
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_bw() +  # White background theme
theme(
text = element_text(size = 12),  # Base font size for all text elements
axis.title.x = element_text(size = 14),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm")  # Adjust margins
)
# Print the plot
print(p)
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
filter(
!grepl("Hamburg", electionname),
!grepl("Berlin", electionname),
!grepl("Bremen", electionname)
) %>%
mutate(
diff = Incumbent_share_weight - share_woPM_IV1,
election_order = factor(electionname, levels = electionname[order(diff)])
)
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_bw() +  # White background theme
theme(
text = element_text(size = 12),  # Base font size for all text elements
axis.title.x = element_text(size = 14),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm")  # Adjust margins
)
# Print the plot
print(p)
# Export the plot to a PNG file
outputfile <- paste0(path, "outputs/dumbbell_plot.png")
ggsave(outputfile, plot=p, width = 8.27, height = 11.69, units = "in", dpi = 300)
count <- df %>%
filter(diff > 1 | diff < -1) %>%
nrow()
print(count)
nrow()
dim(df)
count2 <- df %>%
filter(diff > 2 | diff < -2) %>%
nrow()
print(count2)
R.Version()
library(ggplot2)
library(dplyr)
library(haven)
# SPECIFY THE OVERALL PATH HERE
path <- "/Users/ben_elsner/github repos/pollutionvoting/replication_pack/"
filename <- paste0(path, "tempdata/kreise_elections_collapsed.dta")
df <- read_dta(filename)
df <- df %>%
filter(
!grepl("Hamburg", electionname),
!grepl("Berlin", electionname),
!grepl("Bremen", electionname)
) %>%
mutate(
diff = Incumbent_share_weight - share_woPM_IV1,
election_order = factor(electionname, levels = electionname[order(diff)])
)
# Plot
p <- ggplot(df, aes(x = diff, y = election_order)) +
geom_segment(aes(x = 0, xend = diff, y = election_order, yend = election_order), color = "blue") +
geom_point(aes(x = diff, y = election_order), size = 3, color = "blue") +
geom_vline(xintercept = 0, color = "red", size = 1) +
labs(x = "Predicted Difference Incumbent Share", y = "") +
theme_bw() +  # White background theme
theme(
text = element_text(size = 12),  # Base font size for all text elements
axis.title.x = element_text(size = 14),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
plot.margin = margin(1, 1, 1, 1, "cm")  # Adjust margins
)
# Print the plot
print(p)
# Export the plot to a PNG file
outputfile <- paste0(path, "outputs/figure_S14.png")
ggsave(outputfile, plot=p, width = 8.27, height = 11.69, units = "in", dpi = 300)
# Number outside the [-1,1] interval
count <- df %>%
filter(diff > 1 | diff < -1) %>%
nrow()
print(count)
count2 <- df %>%
filter(diff > 2 | diff < -2) %>%
nrow()
print(count2)
# TeX to RMarkdown Interpreter
# Converts beamer code to R Markdown using a Python script
# Python needs to be installed
# Requires the reticulate package
# Input is a tex file; output is a md file in the same folder.
#------------------------------------------------
setwd("~/github repos/causalinfUCD/slides/1 Regression Recap")
tex_to_md <- function(tex_filename) {
require(reticulate)
base_filename <- tools::file_path_sans_ext(tex_filename)
py_script <- paste('import re',
paste0('with open("', tex_filename, '", "r") as file:'),
'  filedata = file.read()',
'  filedata = re.sub(r"^%.*$", "", filedata, flags=re.MULTILINE)',
'  filedata = re.sub(r"\\\\begin{frame}{(.+?)}", r"## \\1", filedata)',
'  filedata = re.sub(r"\\\\end{frame}", "", filedata)',
'  filedata = re.sub(r"\\\\begin{frame}", "---", filedata)',
'  filedata = re.sub(r"\\\\begin{itemize}", "", filedata)',
'  filedata = re.sub(r"\\\\end{itemize}", "", filedata)',
'  filedata = re.sub(r"\\\\item", "-", filedata)',
'  filedata = re.sub(r"\\\\textit{(.+?)}", r"*\\1*", filedata)',
'  filedata = re.sub(r"\\\\textbf{(.+?)}", r"**\\1**", filedata)',
paste0('with open("', base_filename, '.md", "w") as file:'),
'  file.write(filedata)',
sep = '\n')
# Run the Python script
py_run_string(py_script)
}
# Use the function
tex_to_md("slidesfromphd.tex")
